[user]
	name = AJ Alon
	email = {{ .email }}
[core]
        editor = zed --wait
        excludesFile = ~/.gitignore
[init]
        defaultBranch = main
[pull]
	rebase = true
[push]
        default = current
        gpgSign = if-asked
        autoSetupRemote = true
[stash]
        showPatch = true
[rebase]
        missingCommitsCheck = error
        autoSquash = true
[branch]
        autosetuprebase = always
[credential]
{{ if eq .chezmoi.os "darwin" }}
        helper = osxkeychain
{{ end }}
[checkout]
        defaultRemote = origin
[alias]
        st = status
        co = checkout
        ci = commit
        cp = cherry-pick
        br = branch
        nb = switch -
        adp = add -p
        cop = checkout -p -- .
        rhp = reset HEAD -p
        rsp = restore --staged -p
        sp = stash -p
        l = log -1 HEAD
        l2 = log -2 HEAD
        l3 = log -3 HEAD
        # https://davidwalsh.name/get-default-branch-name
        default-branch = !git remote show origin | grep 'HEAD branch' | cut -d' ' -f5
        rebaseia = rebase -i --autosquash
        rebaseiam = !git rebase -i --autosquash $(git default-branch)
        please = push --force-with-lease
        praise = blame
    # https://haacked.com/archive/2014/07/28/github-flow-aliases/
    up = !git pull --rebase --prune $@ && git submodule update --init --recursive
    co = checkout
    cob = checkout -b
    cm = !git add -A && git commit -m
    save = !git add -A && git commit -m 'SAVEPOINT'
    wip = commit -am "WIP"
    undo = reset HEAD~1 --mixed
    amend = commit -a --amend
    wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
    bclean = "!f() { git checkout ${1-master} && git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs git branch -d; }; f"
    bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"
    migrate = "!f(){ CURRENT=$(git symbolic-ref --short HEAD); git checkout -b $1 && git branch --force $CURRENT ${3-$CURRENT@{u}} && git rebase --onto ${2-master} $CURRENT; }; f"

    # https://coderwall.com/p/euwpig/a-better-git-log
    lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

    # https://hackernoon.com/lesser-known-git-commands-151a1918a60
    please = push --force-with-lease
    commend = commit --amend --no-edit
    st = status -sb -uall
    grog = log --graph --abbrev-commit --decorate --all --format=format:\"%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(dim white) - %an%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n %C(white)%s%C(reset)\"

    # @jmbledsoe
    # trim = delete all branches that are fully merged into their upstream branches
    # squash = similar to 'git merge --squash', but without committing
    trimdryrun = "!f() { git branch | grep -v '^\\*' | xargs cat; }; f"
    trim = "!f() { git branch | grep -v '^\\*' | xargs git branch -D; }; f"
    squash = "!f() { git reset $(git merge-base ${1-master} $(git rev-parse --abbrev-ref HEAD)); }; f"

    branchdate = for-each-ref --count=10 --sort=-committerdate refs/heads/ --format="%(authordate:short)%09%(objectname:short)%09%1B[0;33m%(refname:short)%1B[m%09"
